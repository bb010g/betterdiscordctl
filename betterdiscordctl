#!/usr/bin/env bash

set -ueo pipefail
shopt -s dotglob extglob nullglob

# Constants
VERSION=2.0.0
SOURCE=$(readlink -f "${BASH_SOURCE[0]}")
DISABLE_UPGRADE=

# Options
cmd=status
verbosity=0
d_flavors=('' canary ptb)
d_modules=
bd_repo='rauenzi/BetterDiscordApp'
bd_release=latest
bd_asar=
flatpak=
flatpak_bin=flatpak
snap=
snap_bin=snap
upgrade_url='https://github.com/bb010g/betterdiscordctl/raw/master/betterdiscordctl'

# Variables
d_flavor=
d_core=
xdg_config=${XDG_CONFIG_HOME:-$HOME/.config}
bdc_data=${XDG_DATA_HOME:-$HOME/.local/share}/betterdiscordctl
d_config=
bd_config=$xdg_config/BetterDiscord
bd_asar_dest=$bd_config/data/betterdiscord.asar

show_help() {
  cat << EOF
Usage: ${0##*/} [COMMAND] [OPTION...]

Options:
  -V, --version                  Display version info and exit
  -h, --help                     Display this help message and exit
  -v, --verbose                  Increase verbosity
  -s, --quiet                    Decrease verbosity
  -f, --flavors=FLAVORS          Colon-separated list of Discord flavors
                                 (default: ":canary:ptb")
  -m, --modules=DIRECTORY        Use the specified Discord modules directory
  -r, --bd-repo=REPOSITORY       Use the specified git repo for BetterDiscord
  -R, --bd-release=RELEASE       Use the specified release for BetterDiscord
  -a, --bd-asar=FILE             Use the specified betterdiscord.asar file
      --flatpak                  Use the Flatpak version of Discord
      --flatpak-bin=EXECUTABLE   Use the specified "flatpak" executable
      --snap                     Use the Snap version of Discord
      --snap-bin=EXECUTABLE      Use the specified "snap" executable
      --upgrade-url=URL          Custom URL to upgrade betterdiscordctl with

Commands:
  status (default)               Show the current Discord patch state.
  install                        Install BetterDiscord.
  reinstall                      Reinstall BetterDiscord.
  uninstall                      Uninstall BetterDiscord.
  upgrade                        Update betterdiscordctl.
EOF
}

verbose() {
  if (( verbosity >= $1 )); then
    shift
    printf '%s\n' "$1" >&2
  fi
}

die() {
  while (( $# > 0 )); do
    printf '%s\n' "$1" >&2
    shift
  done
  exit 1
}

die_with_help() {
  die "$@" 'Use "--help" for more information.'
}

die_no_option() {
  die_with_help "ERROR: \"$1\" requires no option argument."
}

die_option() {
  die_with_help "ERROR: \"$1\" requires an option argument."
}

die_non_empty_option() {
  die_with_help "ERROR: \"$1\" requires a non-empty option argument."
}

while :; do
  if [[ -z ${1+x} ]]; then break; fi
  case $1 in
    status|install|reinstall|uninstall|upgrade)
      cmd=$1
      ;;
    -V|--version)
      printf 'betterdiscordctl %s\n' "$VERSION" >&2
      exit
      ;;
    -V=*|--version=*) die_no_option "${1%%=*}" ;;
    -h|-\?|--help)
      show_help; exit
      ;;
    -h=*|-\?=*|--help=*) die_no_option "${1%%=*}" ;;
    -v|--verbose)
      ((verbosity++))
      ;;
    -v=*|--verbose=*) die_no_option "${1%%=*}" ;;
    -q|--quiet)
      ((verbosity--))
      ;;
    -q=*|--quiet=*) die_no_option "${1%%=*}" ;;
    -f|--flavors)
      if [[ ${2+x} ]]; then IFS=':' read -ra d_flavors <<< "$2:"; shift
      else die_option "$1"; fi
      ;;
    --flavors=*)
      IFS=':' read -ra d_flavors <<< "${1#*=}:"
      ;;
    -m|--modules)
      if [[ ${2:+x} ]]; then d_modules=$2; shift
      else die_non_empty_option "$1"; fi
      ;;
    --modules=?*) d_modules=${1#*=} ;;
    --modules=) die_non_empty_option "${1%%=*}" ;;
    -r|--bd-repo)
      if [[ ${2:+x} ]]; then bd_repo=$2; shift
      else die_non_empty_option "$1"; fi
      ;;
    --bd-repo=?*) bd_repo=${1#*=} ;;
    --bd-repo=) die_non_empty_option "${1%%=*}" ;;
    -R|--bd-release)
      if [[ ${2:+x} ]]; then bd_release=$2; shift
      else die_non_empty_option "$1"; fi
      ;;
    --bd-release=?*) bd_release=${1#*=} ;;
    --bd-release=) die_non_empty_option "${1%%=*}" ;;
    -a|--bd-asar)
      if [[ ${2:+x} ]]; then bd_asar=$2; shift
      else die_non_empty_option "$1"; fi
      ;;
    --bd-asar=?*) bd_asar=${1#*=} ;;
    --bd-asar=) die_non_empty_option "${1%%=*}" ;;
    --flatpak) flatpak=yes ;;
    --flatpak=*) die_no_option "${1%%=*}" ;;
    --flatpak-bin)
      if [[ ${2:+x} ]]; then flatpak_bin=$2; shift
      else die_non_empty_option "$1"; fi
      ;;
    --flatpak-bin=?*) flatpak_bin=${1#*=} ;;
    --flatpak-bin=) die_non_empty_option "${1%%=*}" ;;
    --snap) snap=yes ;;
    --snap=*) die_no_option "${1%%=*}" ;;
    --snap-bin)
      if [[ ${2:+x} ]]; then snap_bin=$2; shift
      else die_non_empty_option "$1"; fi
      ;;
    --snap-bin=?*) snap_bin=${1#*=} ;;
    --snap-bin=) die_non_empty_option "${1%%=*}" ;;
    --upgrade-url)
      if [[ ${2:+x} ]]; then upgrade_url=$2; shift
      else die_non_empty_option "$1"; fi
      ;;
    --upgrade-url=?*) upgrade_url=${1#*=} ;;
    --upgrade-url=) die_non_empty_option "${1%%=*}" ;;
    --)
      shift
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      ;;
    *)
      break
  esac
  shift
done

# currently unused
# mkdir -p "$bdc_data"

# Commands

bdc_status() {
  asar_install=no
  index_mod=no
  verbose 2 "VV: BetterDiscord asar installation: $bd_asar_dest"
  if [[ -h $bd_asar_dest && ! -f $bd_asar_dest ]]; then
    asar_install='(broken link) no'
  elif [[ -f $bd_asar_dest ]]; then
    asar_install='(symbolic link) yes'
  elif [[ -d $bd_config ]]; then
    asar_install='(missing) no'
  fi
  grep -Fq 'betterdiscord.asar' "$d_core/index.js" && index_mod=yes

  printf 'Discord flavor: %s
Discord modules: %s
BetterDiscord directory: %s
BetterDiscord asar installed: %s
Index modified: %s
' "$d_flavor" "$d_modules" "$bd_config" "$asar_install" "$index_mod"
}

bdc_install() {
  grep -Fq 'betterdiscord.asar' "$d_core/index.js" && die 'ERROR: Already installed.'
  bdc_clean_legacy

  bd_install_asar
  bd_patch

  printf 'Installed. (Restart Discord if necessary.)\n' >&2
}

bdc_reinstall() {
  grep -Fq 'betterdiscord.asar' "$d_core/index.js" || die 'ERROR: Not installed.'
  bdc_clean_legacy

  bdc_kill

  bd_install_asar
  bd_patch

  printf 'Reinstalled.\n' >&2
}

bdc_uninstall() {
  grep -Fq 'betterdiscord.asar' "$d_core/index.js" || die 'ERROR: Not installed.'
  bdc_clean_legacy

  bdc_kill
  bd_unpatch

  printf 'Uninstalled.\n' >&2
}

bdc_upgrade() {
  if [[ $DISABLE_UPGRADE ]]; then
    die 'ERROR: Upgrading has been disabled.' \
        'If you installed this from a package, its maintainer should keep it up to date.'
  fi

  github_version=$(curl -NLSs "$upgrade_url" | sed -n 's/^VERSION=//p')
  if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    die "ERROR: GitHub couldn't be reached to check the version."
  fi
  verbose 2 "VV: Script location: $SOURCE"
  verbose 2 "VV: Upgrade URL: $upgrade_url"
  verbose 1 "V: Local version: $VERSION"
  verbose 1 "V: GitHub version: $github_version"
  semver_diff=$(Semver::compare "$github_version" "$VERSION")
  if [[ $semver_diff -eq 1 ]]; then
    printf 'Downloading betterdiscordctl...\n' >&2
    if curl -LSso "$SOURCE" "$upgrade_url"; then
      printf 'Successfully updated betterdiscordctl.\n' >&2
    else
      die 'ERROR: Failed to update betterdiscordctl.' \
          'You may want to rerun this command with sudo.'
    fi
  else
    if [[ $semver_diff -eq 0 ]]; then
      printf 'betterdiscordctl is already the latest version (%s).\n' \
          "$VERSION" >&2
    else
      printf 'Local version (%s) is higher than GitHub version (%s).\n' \
          "$VERSION" "$github_version" >&2
    fi
  fi
}

# Implementation functions

bdc_main() {
  if [[ -z $d_modules ]]; then
    if [[ $flatpak ]]; then bdc_flatpak
    elif [[ $snap ]]; then bdc_snap
    else bdc_scan; fi
  else
    [[ -d $d_modules ]] || die 'ERROR: Discord modules directory not found.'
    d_flavor=${d_modules%/*/modules}
    d_flavor=${d_flavor##*/discord}
  fi
  [[ -d $d_modules ]] || die 'ERROR: Discord modules directory not found.' \
      'Try specifying it with "--modules".'
  d_core=$d_modules/discord_desktop_core
  [[ -d $d_core ]] || die "ERROR: Directory 'discord_desktop_core' not found in $d_modules"
}

bdc_scan() {
  for d_flavor in "${d_flavors[@]}"; do
    verbose 2 "VV: Trying flavor '$d_flavor'"
    d_config=$xdg_config/discord${d_flavor,,}
    if [[ ! -d $d_config ]]; then
      printf 'WARN: Discord %s config directory not found (%s).\n' \
          "$d_flavor" "$d_config" >&2
      continue
    fi
    if [[ -z $d_modules ]]; then
      bdc_find_modules
    elif [[ ! -d $d_modules ]]; then
      die 'ERROR: Discord modules directory not found.'
    fi
    break
  done
}

bdc_find_modules() {
  [[ -d $d_config ]] || die "ERROR: Discord $d_flavor config directory not found ($d_config)."
  declare -a all_d_modules
  all_d_modules=("$d_config/"+([0-9]).+([0-9]).+([0-9])/modules)
  ((${#all_d_modules[@]})) || die 'ERROR: Discord modules directory not found.'
  d_modules=${all_d_modules[-1]}
  verbose 1 "V: Found modules in $d_modules"
}

bdc_snap() {
  # shellcheck disable=SC2016
  # Expansion should happen inside snap's shell.
  xdg_config=$("$snap_bin" run --shell discord \
      <<< $'printf -- \'%s/.config\n\' "$SNAP_USER_DATA" 1>&3' 3>&1)
  d_config=$xdg_config/discord
  bd_config=$xdg_config/BetterDiscord
  bd_asar_dest=$bd_config/data/betterdiscord.asar
  bdc_find_modules
}

bdc_flatpak() {
  # shellcheck disable=SC2016
  # Expansion should happen inside flatpak's shell.
  xdg_config=$("$flatpak_bin" run --command=sh com.discordapp.Discord \
      -c $'printf -- \'%s\n\' "$XDG_CONFIG_HOME"')
  d_config=${xdg_config:-$HOME/.var/app/com.discordapp.Discord/config}/discord
  bd_config=$xdg_config/BetterDiscord
  bd_asar_dest=$bd_config/data/betterdiscord.asar
  bdc_find_modules
}

bdc_kill() {
  printf 'Killing Discord %s processes...\n' "$d_flavor" >&2
  pkill -exi -KILL "discord${d_flavor:0:8}" || printf 'No active processes found.\n' >&2
}

bd_install_asar() {
  verbose 2 "VV: BetterDiscord asar installation: $bd_asar_dest"
  if [[ -z $bd_asar ]]; then
    declare release=https://github.com/$bd_repo/releases/$bd_release
    verbose 1 "VV: BetterDiscord release URL: $release"
    verbose 1 "V: Downloading BetterDiscord asar..."
    curl -LSso "$bd_asar_dest" --create-dirs \
        "$release/download/betterdiscord.asar"
  else
    if [[ ${flatpak+x} ]] || [[ ${snap+x} ]]; then
      verbose 'V: Copying BetterDiscord asar...'
      install -D "$bd_asar" "$bd_asar_dest"
    fi
  fi
}

bdc_clean_legacy() {
  if [[ -d $d_core/core ]]; then
    printf 'Removing legacy core directory...\n' >&2
    rm -rf "$d_core/core"
  fi
  if [[ -d $d_core/injector ]]; then
    printf 'Removing legacy injector directory...\n' >&2
    rm -rf "$d_core/injector"
  fi
  if [[ -d $bdc_data ]]; then
    if [[ -f "$bdc_data/bd_map" || -d "$bdc_data/bd" ]]; then
      printf 'Removing legacy machine-specific data...\n' >&2
      rm -rf "$bdc_data/bd_map" "$bdc_data/bd"
    fi
  fi
}

bd_patch() {
  verbose 1 'V: Injecting into index.js...'
  declare escaped_asar=${bd_asar_dest/\\/\\\\}
  printf $'require("%s");
module.exports = require(\'./core.asar\');
' "${escaped_asar//\"/\\\"}" > "$d_core/index.js"
}

bd_unpatch() {
  verbose 1 'V: Removing BetterDiscord injection...'
  printf $'module.exports = require(\'./core.asar\');
' > "$d_core/index.js"
}

# Included from https://github.com/bb010g/Semver.sh , under the MIT License.

Semver::validate() {
  # shellcheck disable=SC2064
  trap "$(shopt -p extglob)" RETURN
  shopt -s extglob

  declare normal=${1%%[+-]*}
  declare extra=${1:${#normal}}

  declare major=${normal%%.*}
  if [[ $major != +([0-9]) ]]; then echo "Semver::validate: invalid major: $major" >&2; return 1; fi
  normal=${normal:${#major}+1}
  declare minor=${normal%%.*}
  if [[ $minor != +([0-9]) ]]; then echo "Semver::validate: invalid minor: $minor" >&2; return 1; fi
  declare patch=${normal:${#minor}+1}
  if [[ $patch != +([0-9]) ]]; then echo "Semver::validate: invalid patch: $patch" >&2; return 1; fi

  declare -r ident="+([0-9A-Za-z-])"
  declare pre=${extra%%+*}
  declare pre_len=${#pre}
  if [[ $pre_len -gt 0 ]]; then
    pre=${pre#-}
    if [[ $pre != $ident*(.$ident) ]]; then echo "Semver::validate: invalid pre-release: $pre" >&2; return 1; fi
  fi
  declare build=${extra:pre_len}
  if [[ ${#build} -gt 0 ]]; then
    build=${build#+}
    if [[ $build != $ident*(.$ident) ]]; then echo "Semver::validate: invalid build metadata: $build" >&2; return 1; fi
  fi

  if [[ $2 ]]; then
    echo "$2=(${major@Q} ${minor@Q} ${patch@Q} ${pre@Q} ${build@Q})"
  else
    echo "$1"
  fi
}

Semver::compare() {
  declare -a x y
  eval "$(Semver::validate "$1" x)"
  eval "$(Semver::validate "$2" y)"

  declare x_i y_i i
  for i in 0 1 2; do
    x_i=${x[i]}; y_i=${y[i]}
    if [[ $x_i -eq $y_i ]]; then continue; fi
    if [[ $x_i -gt $y_i ]]; then echo 1; return; fi
    if [[ $x_i -lt $y_i ]]; then echo -1; return; fi
  done

  x_i=${x[3]}; y_i=${y[3]}
  if [[ -z $x_i && $y_i ]]; then echo 1; return; fi
  if [[ $x_i && -z $y_i ]]; then echo -1; return; fi

  declare -a x_pre; declare x_len
  declare -a y_pre; declare y_len
  IFS=. read -ra x_pre <<< "$x_i"; x_len=${#x_pre[@]}
  IFS=. read -ra y_pre <<< "$y_i"; y_len=${#y_pre[@]}

  if (( x_len > y_len )); then echo 1; return; fi
  if (( x_len < y_len )); then echo -1; return; fi

  for (( i=0; i < x_len; i++ )); do
    x_i=${x_pre[i]}; y_i=${y_pre[i]}
    if [[ $x_i = "$y_i" ]]; then continue; fi

    declare num_x num_y
    num_x=$([[ $x_i = +([0-9]) ]] && echo "$x_i")
    num_y=$([[ $y_i = +([0-9]) ]] && echo "$y_i")
    if [[ $num_x && $num_y ]]; then
      if [[ $x_i -gt $y_i ]]; then echo 1; return; fi
      if [[ $x_i -lt $y_i ]]; then echo -1; return; fi
    else
      if [[ $num_y ]]; then echo 1; return; fi
      if [[ $num_x ]]; then echo -1; return; fi
      if [[ $x_i > $y_i ]]; then echo 1; return; fi
      if [[ $x_i < $y_i ]]; then echo -1; return; fi
    fi
  done

  echo 0
}

# Run command

case "$cmd" in
  status)
    bdc_main
    bdc_status
    ;;
  install)
    bdc_main
    bdc_install
    ;;
  reinstall)
    bdc_main
    bdc_reinstall
    ;;
  uninstall)
    bdc_main
    bdc_uninstall
    ;;
  upgrade)
    bdc_upgrade
    ;;
  *)
    die "ERROR: Unknown command: $cmd"
    ;;
esac
